diff -up qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/schema/qxsdschemachecker.cpp.omv~ qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/schema/qxsdschemachecker.cpp
--- qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/schema/qxsdschemachecker.cpp.omv~	2020-02-07 16:08:39.401362608 +0100
+++ qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/schema/qxsdschemachecker.cpp	2020-02-07 16:16:13.586382635 +0100
@@ -127,15 +127,15 @@ static bool matchesType(const SchemaType
             const XsdSimpleType::Ptr simpleType = otherType;
             if (simpleType->category() == XsdSimpleType::SimpleTypeAtomic) {
                 // for atomic type we use the same test as in SchemaType::wxsTypeMatches
-                retval = (myType == simpleType ? true : matchesType(myType, simpleType->wxsSuperType(), visitedTypes));
+                retval = (myType == static_cast<SchemaType::Ptr>(simpleType) ? true : matchesType(myType, simpleType->wxsSuperType(), visitedTypes));
             } else if (simpleType->category() == XsdSimpleType::SimpleTypeList) {
                 // for list type we test against the itemType property
-                retval = (myType == simpleType->itemType() ? true : matchesType(myType, simpleType->itemType()->wxsSuperType(), visitedTypes));
+                retval = (myType == static_cast<SchemaType::Ptr>(simpleType->itemType()) ? true : matchesType(myType, simpleType->itemType()->wxsSuperType(), visitedTypes));
             } else if (simpleType->category() == XsdSimpleType::SimpleTypeUnion) {
                 // for union type we test against each member type
                 const XsdSimpleType::List members = simpleType->memberTypes();
                 for (int i = 0; i < members.count(); ++i) {
-                    if (myType == members.at(i) ? true : matchesType(myType, members.at(i)->wxsSuperType(), visitedTypes)) {
+                    if (myType == static_cast<SchemaType::Ptr>(members.at(i)) ? true : matchesType(myType, members.at(i)->wxsSuperType(), visitedTypes)) {
                         retval = true;
                         break;
                     }
@@ -159,7 +159,7 @@ static bool matchesType(const SchemaType
  */
 static bool hasCircularUnionInheritance(const XsdSimpleType::Ptr &type, const SchemaType::Ptr &otherType, NamePool::Ptr &namePool)
 {
-    if (type == otherType) {
+    if (type == static_cast<XsdSimpleType::Ptr>(otherType)) {
         return true;
     }
 
@@ -172,7 +172,7 @@ static bool hasCircularUnionInheritance(
     if (simpleOtherType->category() == XsdSimpleType::SimpleTypeUnion) {
         const XsdSimpleType::List memberTypes = simpleOtherType->memberTypes();
         for (int i = 0; i < memberTypes.count(); ++i) {
-            if (otherType->wxsSuperType() == type) {
+            if (otherType->wxsSuperType() == static_cast<SchemaType::Ptr>(type)) {
                 return true;
             }
             if (hasCircularUnionInheritance(type, memberTypes.at(i), namePool)) {
@@ -732,7 +732,7 @@ void XsdSchemaChecker::checkComplexTypeC
                     return;
                 }
 
-                if (complexType->contentType()->simpleType() != baseType) {
+                if (complexType->contentType()->simpleType() != static_cast<AnySimpleType::Ptr>(baseType)) {
                     m_context->error(QtXmlPatterns::tr("Complex type %1 must have the same simple type as its base class %2.")
                                                       .arg(formatType(m_namePool, complexType))
                                                       .arg(formatType(m_namePool, baseType)),
@@ -1590,7 +1590,7 @@ void XsdSchemaChecker::checkConstraining
             }
 
             // @see http://www.w3.org/TR/xmlschema-2/#enumeration-valid-restriction
-            if (facet->type() == XsdFacet::Enumeration && baseType != BuiltinTypes::xsNOTATION) {
+            if (facet->type() == XsdFacet::Enumeration && baseType != static_cast<SchemaType::Ptr>(BuiltinTypes::xsNOTATION)) {
                 const AtomicValue::List multiValue = facet->multiValue();
                 for (int j = 0; j < multiValue.count(); ++j) {
                     const QString stringValue = DerivedString<TypeString>::Ptr(multiValue.at(j))->stringValue();
@@ -1725,7 +1725,7 @@ void XsdSchemaChecker::checkElementConst
                     return;
                 }
             }
-            if ((targetType == BuiltinTypes::xsID) || BuiltinTypes::xsID->wxsTypeMatches(type)) {
+            if ((targetType == static_cast<AnySimpleType::Ptr>(BuiltinTypes::xsID)) || BuiltinTypes::xsID->wxsTypeMatches(type)) {
                 m_context->error(QtXmlPatterns::tr("Element %1 is not allowed to have a value constraint if its type is derived from %2.")
                                                   .arg(formatKeyword(element->displayName(m_namePool)))
                                                   .arg(formatType(m_namePool, BuiltinTypes::xsID)),
diff -up qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/schema/qxsdschemaresolver.cpp.omv~ qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/schema/qxsdschemaresolver.cpp
--- qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/schema/qxsdschemaresolver.cpp.omv~	2020-02-07 16:17:12.723385243 +0100
+++ qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/schema/qxsdschemaresolver.cpp	2020-02-07 16:17:40.455386465 +0100
@@ -314,12 +314,12 @@ void XsdSchemaResolver::copyDataTo(const
 QXmlName XsdSchemaResolver::baseTypeNameOfType(const SchemaType::Ptr &type) const
 {
     for (int i = 0; i < m_simpleRestrictionBases.count(); ++i) {
-        if (m_simpleRestrictionBases.at(i).simpleType == type)
+        if (m_simpleRestrictionBases.at(i).simpleType == static_cast<XsdSimpleType::Ptr>(type))
             return m_simpleRestrictionBases.at(i).baseName;
     }
 
     for (int i = 0; i < m_complexBaseTypes.count(); ++i) {
-        if (m_complexBaseTypes.at(i).complexType == type)
+        if (m_complexBaseTypes.at(i).complexType == static_cast<XsdComplexType::Ptr>(type))
             return m_complexBaseTypes.at(i).baseName;
     }
 
diff -up qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/type/qtypechecker.cpp.omv~ qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/type/qtypechecker.cpp
--- qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/type/qtypechecker.cpp.omv~	2020-02-07 16:18:28.616388589 +0100
+++ qtxmlpatterns-everywhere-src-5.14.1/src/xmlpatterns/type/qtypechecker.cpp	2020-02-07 16:18:41.721389167 +0100
@@ -141,7 +141,7 @@ Expression::Ptr TypeChecker::verifyType(
                 const ItemType::Ptr expectedContextType(operand->expectedContextItemType());
 
                 /* Allow the empty sequence. We don't want to trigger XPTY0020 on ()/... . */
-                if(!expectedContextType->xdtTypeMatches(contextType) && contextType != CommonSequenceTypes::Empty)
+                if(!expectedContextType->xdtTypeMatches(contextType) && contextType != static_cast<ItemType::Ptr>(CommonSequenceTypes::Empty))
                 {
                     context->error(wrongType(context->namePool(), operand->expectedContextItemType(), contextType),
                                             ReportContext::XPTY0020, operand.data());
